<html>
<head>
<style>
/*
vim-hybrid theme by w0ng (https://github.com/w0ng/vim-hybrid)
*/
body {
margin: 0px;
padding: 0px;
}

.navigator {
    position: fixed;
    background-color: antiquewhite;
    width: 100%;
    z-index: 100;
    margin: 0;
	top:0px;
}

.listing {
	z-index: 0;
	margin: 0;
}

pre {
	margin: 0px;
	padding: 0px;
	height: 15pt;
}

td {
	height: 15pt;
	padding: 0px;
}

.variable {
	display:inline-block;
	color: #5cd2e6;
	margin-left: 10px;
}

/*background color*/
.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #1d1f21;
}

/*selection color*/
.hljs::selection,
.hljs span::selection {
  background: #373b41;
}

.hljs::-moz-selection,
.hljs span::-moz-selection {
  background: #373b41;
}

/*foreground color*/
.hljs {
  color: #c5c8c6;
}

/*color: fg_yellow*/
.hljs-title,
.hljs-name {
  color: #f0c674;
}

/*color: fg_comment*/
.hljs-comment,
.hljs-meta,
.hljs-meta .hljs-keyword {
  color: #707880;
}

/*color: fg_red*/
.hljs-number,
.hljs-symbol,
.hljs-literal,
.hljs-deletion,
.hljs-link {
 color: #cc6666
}

/*color: fg_green*/
.hljs-string,
.hljs-doctag,
.hljs-addition,
.hljs-regexp,
.hljs-selector-attr,
.hljs-selector-pseudo {
  color: #b5bd68;
}

/*color: fg_purple*/
.hljs-attribute,
.hljs-code,
.hljs-selector-id {
 color: #b294bb;
}

/*color: fg_blue*/
.hljs-keyword,
.hljs-selector-tag,
.hljs-bullet,
.hljs-tag {
 color: #81a2be;
}

/*color: fg_aqua*/
.hljs-subst,
.hljs-variable,
.hljs-template-tag,
.hljs-template-variable {
  color: #8abeb7;
}

/*color: fg_orange*/
.hljs-type,
.hljs-built_in,
.hljs-builtin-name,
.hljs-quote,
.hljs-section,
.hljs-selector-class {
  color: #de935f;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}
</style>

<script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/languages/erlang.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>

<script>

	var variables = {};
	
	function unEntity(str){
		return str.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
	}
	
	function slide(e) {
    	//e.preventDefault();
	    var el = $(e);
		var elOffset = el.offset().top;
		var elHeight = el.height();
		var windowHeight = window.innerHeight;
		var windowFullHeight = $(window).height();
		var offset;

		if (elHeight < windowFullHeight) {
			offset = elOffset - (windowHeight / 2);
		}
		else {
			offset = elOffset;
		}

	    $('html,body').animate({scrollTop: offset},'slow');
	}

	function isIntoView(el_) {
		el = el_.get(0);
		var rect = el.getBoundingClientRect();
		var elemTop = rect.top;
		var elemBottom = rect.bottom;

		// Only completely visible elements return true:
		var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);
		// Partially visible elements return true:
		//isVisible = elemTop < window.innerHeight && elemBottom >= 0;
    	return isVisible;
	}

	$( document ).ready(function() {
		if ($('#action').html() != undefined) {
			let action_v = $('#action').html();
			let session_v = $('#session').html();
			let module_v = $('#module').html();
			let pid_v = unEntity($('#pid').html());
			let execution_plan = null;
			let modules_variables = [];
			url =  `?get=action&session_id=${session_v}&pid_id=${pid_v}&module=${module_v}`;
			$.get(url, function( data ) {
				variables = data.lines;
				$.get( `?get=pid_json&session_id=${session_v}&pid_id=${pid_v}`, function( data_execution ) {
					//$( ".result" ).html( data );
					execution_plan = data_execution;
					let arr =collect_actions("inclusive");
					get_action(arr);
        
				});
			});
			function get_action(action_record) {
				//console.log(data);
				if (modules_variables[`${module_v}`] == undefined) {
					modules_variables[`${module_v}`] = []
				}
				for (var i = 0; i < action_record.length; i++) {
					let line_var = variables[action_record[i].name];
					if ( isIntoView($(`#line${action_record[i].line}`)) == false ) {
						slide(`#line${action_record[i].line}`);
					}
					if ($('#current').html() != '') {
						let current = $('#current').html();
						$(`#line${current}`).css({"background-color":"white"});
					}

					action_v = action_record[i].name;
					current = action_record[i].line;
					$(`#line${current}`).css({"background-color":"brown"});
					$('#current').html(current);

					// clear variables in case entering to function
					var var_arr =  modules_variables[`${module_v}`];
					if (line_var[0]["var"].func != undefined ) {
						$(`.function_${line_var[0]["function"]}`).remove();
						for (var j = var_arr.length-1;  j >= 0; j--) {
							var el = var_arr[j];
							if ((el.func == line_var[0]["var"].func) && (el.line == line_var[0]["line"])) {
								var_arr.splice(j, 1);
							}
							
						}
						continue;
					}

					let k = '';
					let v = '';
					if (line_var[0]["var"]["return"] != undefined) {
						k = "return";
						v = line_var[0]["value"];
					}
					else {
						k = line_var[0]["var"];
						v = line_var[0]["value"];
					}
					console.log(`k ${k}`);
					console.log(`v ${v}`);
					
					$('<div>', { class: `function_${line_var[0]["function"]} variable`, text: `${k}=${v}`}).appendTo(`#linecode${current}`);
					
					// store shown variables
					modules_variables[`${module_v}`].push({func: `${line_var[0]["function"]}`, line: current, k: k, v: v})
    			}
			};
			//get_action(action);
			

			function collect_actions(type) {
				let actions_arr = [];
				for (var i=0; i < execution_plan.execution.length; i++) {
					console.log(execution_plan.execution[i]);
					let name = execution_plan.execution[i].name;
					if (name == action_v) {
						let j = 1;
						if (type == 'inclusive') {
							j = 0;
						}
						let cond = true;
						let line = undefined;
						while (cond)
						{
							if ((i + j < execution_plan.execution.length) && (line == undefined))
							{
								line = execution_plan.execution[i+j].line;
							}
							if ((line == undefined) || (execution_plan.execution[i+j] == undefined) || (line != execution_plan.execution[i+j].line)) {
								break;
							}
							actions_arr.push(execution_plan.execution[i+j]);
							j = j + 1;
						}
						break;
					}
				}
				return actions_arr;
			}

			ClickNext = function() {
					console.log(execution_plan);
					let arr =collect_actions("next");
					if (arr.length == 0) { return };
					if (arr[0].module != module_v) { // in case of jumping to another module
						var curr_func = arr[0]["function"];
						var curr_line = arr[0]["line"];
						$.get( `?get=module_lines&session_id=${session_v}&pid_id=${pid_v}&action_id=${action_v}&module=${arr[0].module}`,
		 				function( data ) {
							//$( ".result" ).html( data );
							console.log(data);
							module_v = arr[0].module;
							$('#module_block')[0].outerHTML = data;
							get_action(arr);
							$('#next').click( ClickNext)
							$('pre code').each(function(i, block) {
							    hljs.highlightBlock(block);
							});
      
							var vars = modules_variables[`${module_v}`];
							for (var i = 0; i < vars.length; i++) {
								if ((vars[i].func == curr_func) && (vars[i].line != curr_line)) {
									let k = vars[i].k;
									let v = vars[i].v;
									let line = vars[i].line;
									$('<div>', { class: `function_${vars[i].func} variable`, text: `${k}=${v}`}).appendTo(`#linecode${line}`);
								}
							}
						});
					}
					else
					{
						get_action(arr);
					}
			};

			$('#next').click( ClickNext);
		//$('pre code').each(function(i, block) {
		//    hljs.highlightBlock(block);
		//});
		}
    });
 
    //$( window ).on( "load", function() {
    //    //console.log( "window loaded" );
    //});
</script>
</head>
<body>
{% if sessions %}
<table style="border: 1px;">

<th>Session</th>

{% for v in sessions %}
<tr>
<td>
	<a href="?get=session&id={{ v.session }}" >{{ v.session }}</a>
</td>
</tr>
{% endfor %}

</table>
{% endif %}




{% if pids %}
Session: {{ session }} <br>
<table style="border: 1px;">

<th>Pid</th>

{% for v in pids %}
<tr>
<td>
	<a href="?get=pid&session_id={{ session }}&pid_id={{ v.pid }}" >{{ v.pid }}</a>
</td>
</tr>
{% endfor %}

</table>
{% endif %}





{% if raws %}
Session: {{ session }} <br>
Pid: {{ pid }} <br>
<table style="border: 1px;">

<th>Execution plan</th>

{% for v in raws %}
<tr>
<td>
	<a href="?get=module&session_id={{ session }}&pid_id={{ v.pid }}&action_id={{ v.name }}" >{{ v.name }}</a>
</td>
<td>
	{{ v.time }}
</td>
<td>
	{{ v.module }}
</td>
<td>
	{{ v.function }}
</td>
<td>
	{{ v.string_line }}
</td>
</tr>
{% endfor %}

</table>
{% endif %}



{% include "lines.dtl" %}



</body>
</html>
